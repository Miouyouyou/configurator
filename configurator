#!/usr/bin/env python3

import logging
from pathlib import Path
import os
import subprocess
import sys

MODULES_PATH=Path('/usr/share/armbian/configurator/modules')

# TODO Put such functions and setup into libraries

main_logger = logging.getLogger('armbian-configurator')
main_logger.setLevel(logging.DEBUG)
main_logger.addHandler(logging.StreamHandler())

def list_dirs(from_dir=".", containing_files=[]) -> list:
    entries = None
    try:
        entries = os.scandir(from_dir)
    except:
        return []
    dirs = []
    for entry in entries:
        if entry.is_dir():
            directory = entry.name
            all_files_present = True
            for file_to_search in containing_files:
                checked_file_path = Path(from_dir) / directory / file_to_search
                #main_logger.debug(f'Does {checked_file_path} exist ? {checked_file_path.exists()}')
                all_files_present &= checked_file_path.exists()

            if all_files_present:
                dirs.append(directory)
    return dirs

def module_path(module_name: str):
    return

def list_modules() -> list:
    return sorted(list_dirs(
        from_dir=MODULES_PATH,
        containing_files=["module.cli", "DESC"]))

def list_modules_with_descriptions() -> tuple:
    modules = list_modules()
    descriptions = []
    # TODO Error management with some files can't be opened
    for module_name in modules:
        desc_file_path = MODULES_PATH / module_name / "DESC"
        with open(desc_file_path) as desc_file:
            descriptions.append(desc_file.readline())
    return (modules, descriptions)

def show_modules():
    modules, descriptions = list_modules_with_descriptions()
    for i in range(len(modules)):
        print(f'\t{modules[i]}\t{descriptions[i]}')

def execute_module(module_name: str, mode="cli"):
    subprocess.run([Path(module_name) / f'module.{mode}'])

if __name__ == '__main__':

    arguments = sys.argv
    if len(arguments) < 2:
        show_modules()
    else:
        module_name = arguments[1]
        execute_module(module_name)
